<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xhtml="http://www.w3.org/1999/xhtml"
  xmlns:c="http://cnx.rice.edu/cnxml"
  xmlns:m="http://www.w3.org/1998/Math/MathML"
  xmlns:mml="http://www.w3.org/1998/Math/MathML"
  xmlns:md="http://cnx.rice.edu/mdml"
  xmlns:qml="http://cnx.rice.edu/qml/1.0"
  xmlns:mod="http://cnx.rice.edu/#moduleIds"
  xmlns:bib="http://bibtexml.sf.net/"
  xmlns:data="http://dev.w3.org/html5/spec/#custom"
  exclude-result-prefixes="xsl col c m mml md qml mod bib data xhtml"
  >

  <xsl:output omit-xml-declaration="yes" />



  <xsl:template match="c:document">
    <body>
      <xsl:apply-templates select="c:metadata/md:abstract" />
      <xsl:apply-templates select="c:content"/>
    </body>
  </xsl:template>

  <xsl:template match="md:abstract">
    <xsl:if test="node()">
      <div class="abstract">
        <xsl:apply-templates select="@*|node()" />
      </div>
    </xsl:if>
  </xsl:template>

  <xsl:template match="c:content">
    <xsl:apply-templates select="node()" />
  </xsl:template>

  <!-- ================= -->
  <!-- Sections -->
  <!-- ================= -->

  <xsl:template match="c:section">
    <xsl:param name="depth" select="1" />

    <section data-type="section">
      <xsl:apply-templates select="@*" />
      <xsl:choose>
        <xsl:when test="c:title">
          <xsl:element name="h{$depth}">
            <xsl:apply-templates select="@*|c:title/node()" />
          </xsl:element>
          <xsl:apply-templates select="node()[not(self::c:title or self::c:label)]">
            <xsl:with-param name="depth" select="$depth + 1" />
          </xsl:apply-templates>
        </xsl:when>
        <xsl:otherwise>
          <xsl:apply-templates select="node()">
            <xsl:with-param name="depth" select="$depth + 1" />
          </xsl:apply-templates>
        </xsl:otherwise>
      </xsl:choose>
    </section>
  </xsl:template>

  <!-- ================= -->
  <!-- Lists -->
  <!-- ================= -->
  <xsl:template match="c:list[@list-type='bulleted' or @list-type='labeled-item' or not(@list-type)]">
    <ul data-type="unordered-list">
      <xsl:apply-templates select="@*|node()" />
    </ul>
  </xsl:template>
  <xsl:template match="c:list[@list-type='enumerated']">
    <ol data-type="ordered-list">
      <xsl:apply-templates select="@*|node()" />
    </ol>
  </xsl:template>

  <!-- ================= -->
  <!-- List items -->
  <!-- ================= -->
  <xsl:template match="c:item">
    <li>
      <xsl:apply-templates select="@*|node()" />
    </li>
  </xsl:template>

  <!-- ================= -->
  <!-- Paragraphs -->
  <!-- ================= -->
  <xsl:template match="c:para">
    <p>
      <xsl:apply-templates select="@*|node()" />
    </p>
  </xsl:template>

  <!-- ================= -->
  <!-- Links -->
  <!-- ================= -->
  <xsl:template match="c:link">
    <xsl:param name="contents" select="node()" />

    <a href="#">
      <xsl:apply-templates select="@*" />
      <xsl:choose>
        <xsl:when test="count($contents) > 0">
          <xsl:apply-templates select="$contents" />
        </xsl:when>
        <xsl:otherwise>
          <xsl:attribute name="class">
            <!-- This is used in webview... so  I'm using it here... because. -->
            <xsl:text>autogenerated-content</xsl:text>
          </xsl:attribute>
          <xsl:text>[link]</xsl:text>
        </xsl:otherwise>
      </xsl:choose>
    </a>
  </xsl:template>

  <!-- ================= -->
  <!-- Figures/Subfigures -->
  <!-- ================= -->
  <xsl:template match="c:figure/c:caption|c:subfigure/c:caption">
    <figcaption>
      <xsl:apply-templates select="@*|node()" />
    </figcaption>
  </xsl:template>

  <xsl:template match="c:figure|c:subfigure">
    <figure data-type="figure">
      <xsl:apply-templates select="@*" />
      <xsl:apply-templates select="c:label" />
      <xsl:apply-templates select="c:title" />
      <xsl:apply-templates select="c:caption" />
      <xsl:apply-templates select="node()[not(self::c:title or self::c:caption or self::c:label)]" />
    </figure>
  </xsl:template>

  <!-- ================= -->
  <!-- Notes -->
  <!-- ================= -->
  <xsl:template match="c:note">
    <div data-type="note">
      <xsl:apply-templates select="@*|node()" />
    </div>
  </xsl:template>

  <!-- ================= -->
  <!-- Titles -->
  <!-- ================= -->
  <xsl:template match="c:title[ancestor::c:content]">
    <h1 class="title">
      <xsl:apply-templates select="@*" />
      <span class="label"></span>
      <span class="number"></span>
      <span class="divider"></span>
      <span class="wording"><xsl:apply-templates select="node()" /></span>
    </h1>
  </xsl:template>

  <!-- ================= -->
  <!-- Labels -->
  <!-- ================= -->
  <!-- Don't handle these for now - these will likely become attributes -->
  <xsl:template match="c:label" />

  <!-- ================= -->
  <!-- Media -->
  <!-- ================= -->
  <xsl:template match="c:media">
    <xsl:choose>
      <xsl:when test="@display='inline'">
        <span><xsl:apply-templates select="@*|node()" /></span>
      </xsl:when>
      <xsl:otherwise>
        <div><xsl:apply-templates select="@*|node()" /></div>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- Media parameters -->
  <xsl:template match="c:param">
    <xsl:attribute name="{@name}">
      <xsl:value-of select="@value" />
    </xsl:attribute>
  </xsl:template>

  <!-- ================= -->
  <!-- Image -->
  <!-- ================= -->
  <xsl:template match="c:image">
    <xsl:variable name="moduleid" select="/c:document/c:metadata/md:content-id/text()" />
    <img src="{$moduleid}/{@src}" alt="{parent::c:media/@alt}">
      <xsl:apply-templates select="@*[name()!='src']|c:param" />
    </img>
  </xsl:template>

  <!-- ================= -->
  <!-- Transform all attributes -->
  <!-- ================= -->
  <xsl:template match="@*[name()!='data-type']">
    <!--<xsl:apply-templates select="@*" />-->
    <xsl:copy />
  </xsl:template>

  <!-- ================= -->
  <!-- Debug/Development related templates -->
  <!-- ================= -->
  <xsl:template match="c:*" priority="-1000">
    <xsl:message terminate="no">NOT YET TRANSFORMED: <xsl:value-of select="local-name(.)"/></xsl:message>
    <xsl:apply-templates select="node()" />
  </xsl:template>

</xsl:stylesheet>
